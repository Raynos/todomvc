{
  "name": "eventual",
  "id": "eventual",
  "version": "0.3.0",
  "description": "Abstraction for eventual values",
  "keywords": [
    "eventual",
    "lazy",
    "deferred",
    "defer",
    "promise"
  ],
  "author": {
    "name": "Irakli Gozalishvili",
    "email": "rfobic@gmail.com",
    "url": "http://jeditoolkit.com"
  },
  "homepage": "https://github.com/Gozala/eventual",
  "repository": {
    "type": "git",
    "url": "https://github.com/Gozala/eventual.git",
    "web": "https://github.com/Gozala/eventual"
  },
  "bugs": {
    "url": "http://github.com/Gozala/eventual/issues/"
  },
  "dependencies": {
    "method": ">=0.1.1",
    "watchables": ">=0.0.3",
    "pending": ">=0.0.3"
  },
  "devDependencies": {
    "test": ">=0.4.4",
    "repl-utils": ">=1.0.0"
  },
  "scripts": {
    "test": "node test/test-all.js",
    "repl": "node node_modules/repl-utils",
    "swank": "node node_modules/swank-js"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://jeditoolkit.com/LICENSE"
    }
  ],
  "readme": "# eventual\n\n[![Build Status](https://secure.travis-ci.org/Gozala/eventual.png)](http://travis-ci.org/Gozala/eventual)\n\nThis library defines abstraction for eventual values & data type implementing\nthis abstraction. This abstraction is identical to [promises][Promises/A] in\ntheir intent and could be even called promises. Although API and behavior has\nsubtle differences from popular [Promises/A][Promises/A] specification there\nfor different name was chosen.\n\nMain intent of the eventual abstraction is to represent eventual values, ones\nthat functions need to compute asynchronously and there for can not be returned.\nReturning from functions is important, this enables us to form programs units in\nform of black boxes defining data transformation flow between input and output.\n\n### when\n\n[when](./eventual/blob/master/when.js) module exports polymorphic function\nthat is implemented by eventual data type. It maybe used to track pending\neventual's realization. It also comes with default implementation that\ncalls `onRealize` handler with a value it's called with, unless it's type of\nerror. For `Error` values `when` is defined differently, error values are\ntreated as rejections and `onError` handler is called. This is one of the\nkey differences from the typical promise API. Another difference is that\nif value passed to when is not pending, return of `onRealize` called with\nvalues realization is returned, instead of eventual.\n\n\n```js\nvar when = require(\"eventual/when\")\n\nwhen(1)                                         // => 1\nwhen(2, function(x) { return x + 1 })           // => 3\nwhen(Error(\"boom\"), console.log, console.error) // => error: boom\n```\n\n## defer\n\n[defer](./eventual/blob/master/defer.js) module exports function that may be \nused to make pending eventual value that later can be delivered.\n\n```js\nvar defer = require(\"eventual/defer\")\nvar deliver = require(\"pending/deliver\")\n\nvar foo = defer()\ndeliver(foo, 3)\n\nwhen(foo)   // => 3\n\n\nvar bar = defer()\nvar baz = defer()\n\ndeliver(bar, baz)\ndeliver(baz, 2)\n\nwhen(bar)  // => 2\n```\n\n## apply\n\n[apply](./eventual/blob/master/apply.js) module exports function that can be\nused with eventual values, it treats each of it's arguments as eventual value\nand returns a fresh one in return. Once all of the arguments are realized first\none is invoked with rest ones and return value is delivered to the resulting\neventual. If everything happens synchronously actual value is returned.\n\n\n```js\nvar apply = require(\"eventual/apply\")\nvar defer = require(\"eventual/defer\")\nvar deliver = require(\"pending/deliver\")\n\nfunction sum(x y) { return x + y }\nvar x = defer()\nvar y = apply(sum, x, 3)\n\ndeliver(x, 2)\nwhen(y)       // => 5\n```\n\n\n### decorate\n\n[decorate](./eventual/blob/master/decorate.js) module exports function that\ncan be used to compose functions which take eventual values as arguments,\nand returns eventual realized with result of applying realization values of\neventuals to a decorated `f`. If result is delivered in sync realization value\nis returned instead.\n\n\n```js\nvar eventual = require(\"eventual/apply\")\nvar defer = require(\"eventual/defer\")\nvar deliver = require(\"pending/deliver\")\n\nvar sum = eventual(function(x y) { return x + y })\nvar x = defer()\nvar y = defer()\n\nvar xy = sum(x, y)\n\ndeliver(x, 2)\ndeliver(y, 3)\nwhen(xy)       // => 5\n\nsum(2, 2)      // => 4\nsum(x, 1)      // => 3\n```\n\n### recover\n\n[recover](./eventual/blob/master/recover.js) module exports function that\nallows one to recover from an error if eventual value happen to be rejected.\nIt renturns an eventual that is either equivalent of given one or is realized\nto return value of the recovery function, invoked with a rejection error.\n\n```js\nvar recover = require(\"eventual/recover\")\nvar defer = require(\"eventual/defer\")\nvar deliver = require(\"pending/deliver\")\nvar when = require(\"eventual/when\")\n\nvar p1 = defer()\ndeliver(p1, Error(\"boom\"))\n\nvar p2 = recover(p1, function() { return \"np\" })\nwhen(p2)    // => np\n\nvar v1 = defer()\ndeliver(v1, \"bye\")\n\nvar v2 = recover(v1, function() { return \"np\" })\nwhen(v2)    // => bye\n```\n\n### group\n\n[group](./eventual/blob/master/group.js) module exports function that takes\narray of eventual values and return single eventual value that is relized to\nan array of delivery values for those eventuals. If any of the eventuals is\nrejeceted with error, result is rejected with it too.\n\n```js\nvar group = require(\"eventual/group\")\nvar a = defer()\nvar b = defer()\nvar c = defer()\nvar abc = group([ a, b, c ])\n\ndeliver(a, 1)\ndeliver(b, 2)\ndeliver(c, 3)\n\nwhen(abc)  // => [ 1, 2, 3 ]\n```\n\n### Eventual\n\n[type](./eventual/blob/master/type.js) module exports function representing\ndata type of eventual values. Type implements `watchables`, `pending` and\n`eventual` abstractions, where first two are defined in an external libraries.\n\n\n## Install\n\n    npm install eventual\n\n[Promises/A]:http://wiki.commonjs.org/wiki/Promises/A\n[pending]:https://github.com/Gozala/pending\n[deliver]:https://github.com/Gozala/pending#deliver\n",
  "_id": "eventual@0.3.0",
  "_from": "eventual@>=0.3.0"
}
