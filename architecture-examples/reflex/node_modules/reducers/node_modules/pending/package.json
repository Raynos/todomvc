{
  "name": "pending",
  "id": "pending",
  "version": "0.0.3",
  "description": "Abstraction for pending values",
  "keywords": [
    "pending",
    "abstraction",
    "polymorphic"
  ],
  "author": {
    "name": "Irakli Gozalishvili",
    "email": "rfobic@gmail.com",
    "url": "http://jeditoolkit.com"
  },
  "homepage": "https://github.com/Gozala/pending",
  "repository": {
    "type": "git",
    "url": "https://github.com/Gozala/pending.git",
    "web": "https://github.com/Gozala/pending"
  },
  "bugs": {
    "url": "http://github.com/Gozala/pending/issues/"
  },
  "dependencies": {
    "method": ">=0.1.1"
  },
  "devDependencies": {
    "test": ">=0.4.4",
    "repl-utils": ">=1.0.0"
  },
  "scripts": {
    "test": "node test/test-all.js",
    "repl": "node node_modules/repl-utils"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/Gozala/pending/License.md"
    }
  ],
  "readme": "# pending\n\n[![Build Status](https://secure.travis-ci.org/Gozala/pending.png)](http://travis-ci.org/Gozala/pending)\n\nPackage defines pending value abstraction in form of three [polymorphic\nmethods][method], where each one can be extended per type. This abstraction\nlikely to be used in conjunction with [watchable][watchable].\n\n\n### isPending\n\n[pending/is](./pending/blob/master/is.js) module provides method that must\nreturn `true` for all pending values and return `false` for all others. Method\nhas default implementation that returns `false`. Types that wish to implement\nthis abstraction should return `true` while value is considered pending.\n\n```js\nvar isPending = require(\"pending/is\")\n\nfunction Pending() {\n  this._result = this\n  this._pending = true\n  this._listeners = []\n}\nisPending.define(Pending, function(value) {\n  return value._pending\n})\n\nisPending(5)              // => false\nisPending({})             // => false\nisPending(new Pending)    // => true\n```\n\n### await\n\n[pending/await](./pending/blob/master/await.js) module provides method that\ncan be used to register listener that must be called once value is no longer\npending. Method has default implementation that calls listener immediately\nwith a value since non of the built-in types considered to be pending. Custom\ntypes wishing to implement this abstraction should define this method such\nthat all registered listeners will be invoked with a delivery value once\nthey it transitions to non-pending state.\n\n```js\nvar await = require(\"pending/await\")\nawait(3, console.log)       // => info: 3\nawait({}, console.log)      // => info: {}\n\nawait.define(Pending, function(value, handler) {\n  if (!isPending(value)) handler(value._result)\n  else if (!~value._listeners.indexOf(handler)) value._listeners.push(handler)\n})\n```\n\n### deliver\n\n[pending/deliver](./pending/blob/master/deliver.js) module provides method\nthat can is supposed to doliver pending values and transition them form\npending to non-pending state, such transition supposed to happen only once.\nMethod does not comes with default implementation as non of the built-ins are\nconsidered pending, there for attempt to call it on values that don't\nimplement it will throw. Custom types wishing to implement pending\nabstraction may choose to implement it, although it's optional since some\npending values may be observable but not deliverable.\n\n\n```js\nvar deliver = require(\"pending/deliver\")\ndeliver.define(Pending, function(value, result) {\n  // Ignore delivery for no longer pending values, or\n  // if value delivery is already in progress.\n  if (isPending(value) && value._result === value) {\n    // Empty listeres array to allow registration of new listeners\n    // in side effect to dispatch, in order to guarantee FIFO order.\n    var count = 0\n    var index = 0\n    var listeners\n    value._result = result\n    while (index <= count) {\n      if (index === count) {\n        listeners = value._listeners.splice(0)\n        count = listeners.length\n        index = 0\n        if (count === index) {\n          value._pending = false\n          index = index + 1\n        }\n      } else {\n        listeners[index](result)\n        index = index + 1\n      }\n    }\n  }\n})\n```\n\n## Install\n\n    npm install pending\n\n[watchable]:https://github.com/Gozala/watchable\n",
  "_id": "pending@0.0.3",
  "_from": "pending@>=0.0.3"
}
