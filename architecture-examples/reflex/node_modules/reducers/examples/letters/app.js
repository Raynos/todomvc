(function(){var require = function (file, cwd) {
    var resolved = require.resolve(file, cwd || '/');
    var mod = require.modules[resolved];
    if (!mod) throw new Error(
        'Failed to resolve module ' + file + ', tried ' + resolved
    );
    var cached = require.cache[resolved];
    var res = cached? cached.exports : mod();
    return res;
}

require.paths = [];
require.modules = {};
require.cache = {};
require.extensions = [".js",".coffee"];

require._core = {
    'assert': true,
    'events': true,
    'fs': true,
    'path': true,
    'vm': true
};

require.resolve = (function () {
    return function (x, cwd) {
        if (!cwd) cwd = '/';
        
        if (require._core[x]) return x;
        var path = require.modules.path();
        cwd = path.resolve('/', cwd);
        var y = cwd || '/';
        
        if (x.match(/^(?:\.\.?\/|\/)/)) {
            var m = loadAsFileSync(path.resolve(y, x))
                || loadAsDirectorySync(path.resolve(y, x));
            if (m) return m;
        }
        
        var n = loadNodeModulesSync(x, y);
        if (n) return n;
        
        throw new Error("Cannot find module '" + x + "'");
        
        function loadAsFileSync (x) {
            x = path.normalize(x);
            if (require.modules[x]) {
                return x;
            }
            
            for (var i = 0; i < require.extensions.length; i++) {
                var ext = require.extensions[i];
                if (require.modules[x + ext]) return x + ext;
            }
        }
        
        function loadAsDirectorySync (x) {
            x = x.replace(/\/+$/, '');
            var pkgfile = path.normalize(x + '/package.json');
            if (require.modules[pkgfile]) {
                var pkg = require.modules[pkgfile]();
                var b = pkg.browserify;
                if (typeof b === 'object' && b.main) {
                    var m = loadAsFileSync(path.resolve(x, b.main));
                    if (m) return m;
                }
                else if (typeof b === 'string') {
                    var m = loadAsFileSync(path.resolve(x, b));
                    if (m) return m;
                }
                else if (pkg.main) {
                    var m = loadAsFileSync(path.resolve(x, pkg.main));
                    if (m) return m;
                }
            }
            
            return loadAsFileSync(x + '/index');
        }
        
        function loadNodeModulesSync (x, start) {
            var dirs = nodeModulesPathsSync(start);
            for (var i = 0; i < dirs.length; i++) {
                var dir = dirs[i];
                var m = loadAsFileSync(dir + '/' + x);
                if (m) return m;
                var n = loadAsDirectorySync(dir + '/' + x);
                if (n) return n;
            }
            
            var m = loadAsFileSync(x);
            if (m) return m;
        }
        
        function nodeModulesPathsSync (start) {
            var parts;
            if (start === '/') parts = [ '' ];
            else parts = path.normalize(start).split('/');
            
            var dirs = [];
            for (var i = parts.length - 1; i >= 0; i--) {
                if (parts[i] === 'node_modules') continue;
                var dir = parts.slice(0, i + 1).join('/') + '/node_modules';
                dirs.push(dir);
            }
            
            return dirs;
        }
    };
})();

require.alias = function (from, to) {
    var path = require.modules.path();
    var res = null;
    try {
        res = require.resolve(from + '/package.json', '/');
    }
    catch (err) {
        res = require.resolve(from, '/');
    }
    var basedir = path.dirname(res);
    
    var keys = (Object.keys || function (obj) {
        var res = [];
        for (var key in obj) res.push(key);
        return res;
    })(require.modules);
    
    for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (key.slice(0, basedir.length + 1) === basedir + '/') {
            var f = key.slice(basedir.length);
            require.modules[to + f] = require.modules[basedir + f];
        }
        else if (key === basedir) {
            require.modules[to] = require.modules[basedir];
        }
    }
};

(function () {
    var process = {};
    
    require.define = function (filename, fn) {
        if (require.modules.__browserify_process) {
            process = require.modules.__browserify_process();
        }
        
        var dirname = require._core[filename]
            ? ''
            : require.modules.path().dirname(filename)
        ;
        
        var require_ = function (file) {
            return require(file, dirname);
        };
        require_.resolve = function (name) {
            return require.resolve(name, dirname);
        };
        require_.modules = require.modules;
        require_.define = require.define;
        require_.cache = require.cache;
        var module_ = { exports : {} };
        
        require.modules[filename] = function () {
            require.cache[filename] = module_;
            fn.call(
                module_.exports,
                require_,
                module_,
                module_.exports,
                dirname,
                filename,
                process
            );
            return module_.exports;
        };
    };
})();


require.define("path",Function(['require','module','exports','__dirname','__filename','process'],"function filter (xs, fn) {\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (fn(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length; i >= 0; i--) {\n    var last = parts[i];\n    if (last == '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Regex to split a filename into [*, dir, basename, ext]\n// posix version\nvar splitPathRe = /^(.+\\/(?!$)|\\/)?((?:.+?)?(\\.[^.]*)?)$/;\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\nvar resolvedPath = '',\n    resolvedAbsolute = false;\n\nfor (var i = arguments.length; i >= -1 && !resolvedAbsolute; i--) {\n  var path = (i >= 0)\n      ? arguments[i]\n      : process.cwd();\n\n  // Skip empty and invalid entries\n  if (typeof path !== 'string' || !path) {\n    continue;\n  }\n\n  resolvedPath = path + '/' + resolvedPath;\n  resolvedAbsolute = path.charAt(0) === '/';\n}\n\n// At this point the path should be resolved to a full absolute path, but\n// handle relative paths to be safe (might happen when process.cwd() fails)\n\n// Normalize the path\nresolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\nvar isAbsolute = path.charAt(0) === '/',\n    trailingSlash = path.slice(-1) === '/';\n\n// Normalize the path\npath = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n  \n  return (isAbsolute ? '/' : '') + path;\n};\n\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    return p && typeof p === 'string';\n  }).join('/'));\n};\n\n\nexports.dirname = function(path) {\n  var dir = splitPathRe.exec(path)[1] || '';\n  var isWindows = false;\n  if (!dir) {\n    // No dirname\n    return '.';\n  } else if (dir.length === 1 ||\n      (isWindows && dir.length <= 3 && dir.charAt(1) === ':')) {\n    // It is just a slash or a drive letter with a slash\n    return dir;\n  } else {\n    // It is a full dirname, strip trailing slash\n    return dir.substring(0, dir.length - 1);\n  }\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPathRe.exec(path)[2] || '';\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPathRe.exec(path)[3] || '';\n};\n\n//@ sourceURL=path"));

require.define("__browserify_process",Function(['require','module','exports','__dirname','__filename','process'],"var process = module.exports = {};\n\nprocess.nextTick = (function () {\n    var queue = [];\n    var canPost = typeof window !== 'undefined'\n        && window.postMessage && window.addEventListener\n    ;\n    \n    if (canPost) {\n        window.addEventListener('message', function (ev) {\n            if (ev.source === window && ev.data === 'browserify-tick') {\n                ev.stopPropagation();\n                if (queue.length > 0) {\n                    var fn = queue.shift();\n                    fn();\n                }\n            }\n        }, true);\n    }\n    \n    return function (fn) {\n        if (canPost) {\n            queue.push(fn);\n            window.postMessage('browserify-tick', '*');\n        }\n        else setTimeout(fn, 0);\n    };\n})();\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\n\nprocess.binding = function (name) {\n    if (name === 'evals') return (require)('vm')\n    else throw new Error('No such module. (Possibly not yet loaded)')\n};\n\n(function () {\n    var cwd = '/';\n    var path;\n    process.cwd = function () { return cwd };\n    process.chdir = function (dir) {\n        if (!path) path = require('path');\n        cwd = path.resolve(dir, cwd);\n    };\n})();\n\n//@ sourceURL=__browserify_process"));

require.define("/package.json",Function(['require','module','exports','__dirname','__filename','process'],"module.exports = {}\n//@ sourceURL=/package.json"));

require.define("/dom.js",Function(['require','module','exports','__dirname','__filename','process'],"/* vim:set ts=2 sw=2 sts=2 expandtab */\n/*jshint asi: true undef: true es5: true node: true browser: true devel: true\n         forin: true latedef: false globalstrict: true */\n\n'use strict';\n\nvar channel = require('./channel'),\n    enqueue = channel.enqueue\nvar core = require('./core'),\n    convert = core.convert, accumulated = core.accumulated,\n    end = core.end\n\nfunction open(target, type, options) {\n  var capture = options && options.capture || false\n  return convert({}, function(self, next, state) {\n    function handler(event) {\n      state = next(event, state)\n      if (state && state.is === accumulated) {\n        if (target.removeEventListener)\n          target.removeEventListener(type, handler, capture)\n        else\n          target.detachEvent(type, handler, capture)\n        next(end(), state.value)\n      }\n    }\n    if (target.addEventListener) target.addEventListener(type, handler, capture)\n    else target.attachEvent('on' + type, handler)\n  })\n}\nexports.open = open\n\n//@ sourceURL=/dom.js"));

require.define("/channel.js",Function(['require','module','exports','__dirname','__filename','process'],"/* vim:set ts=2 sw=2 sts=2 expandtab */\n/*jshint asi: true undef: true es5: true node: true browser: true devel: true\n         forin: true latedef: false globalstrict: true */\n\n'use strict';\n\nvar hub = require('./hub')\nvar signal = require('./signal'),\n    emit = signal.emit, close = signal.close\n\nfunction channel() {\n  return hub(signal())\n}\nchannel.enqueue = emit\nchannel.close = close\n\nmodule.exports = channel\n\n//@ sourceURL=/channel.js"));

require.define("/hub.js",Function(['require','module','exports','__dirname','__filename','process'],"/* vim:set ts=2 sw=2 sts=2 expandtab */\n/*jshint asi: true undef: true es5: true node: true browser: true devel: true\n         forin: true latedef: false globalstrict: true */\n'use strict';\n\nvar Name = require('name')\nvar Method = require('method')\n\n\nvar core = require('./core'),\n    accumulate = core.accumulate, accumulated = core.accumulated,\n    end = core.end, convert = core.convert\n\nvar input = Name()\nvar consumers = Name()\n\nfunction open(hub) {\n  var source = hub[input]\n  var hubConsumers = hub[consumers]\n  hub[input] = null         // mark hub as open\n  accumulate(source, function distribute(value) {\n    var activeConsumers = hubConsumers.slice(0)\n    var count = activeConsumers.length, index = 0\n    while (index < count) {\n      var consumer = activeConsumers[index++]\n      var state = consumer.next(value, consumer.state)\n      if (state && state.is === accumulated) {\n        var position = hubConsumers.indexOf(consumer)\n        if (position >= 0) hubConsumers.splice(position, 1)\n        consumer.next(end(), consumer.state)\n      } else {\n        consumer.state = state\n      }\n    }\n\n    if (value && value.is === end) {\n      hubConsumers.splice(0)\n      hub[input] = source\n    }\n    if (!hubConsumers.length) {\n      hub[input] = source       // mark hub as not open.\n      return accumulated()      // will notify source consumption is complete.\n    }\n  })\n}\n\nfunction isHub(value) {\n  return !value || (input in value && consumers in value)\n}\n\nfunction isOpen(hub) {\n  return hub[input] === null\n}\n\nfunction hub(source) {\n  // If source is already a hub avoid just return.\n  if (isHub(source)) return source\n  var value = convert(source, hub.accumulate)\n  value[input] = source\n  value[consumers] = []\n  return value\n}\nhub.isHub = isHub\nhub.isOpen = isOpen\nhub.accumulate = function accumulate(hub, next, initial) {\n  hub[consumers].push({ next: next, state: initial })\n  if (!isOpen(hub)) open(hub)\n}\nmodule.exports = hub\n\n//@ sourceURL=/hub.js"));

require.define("/node_modules/name/package.json",Function(['require','module','exports','__dirname','__filename','process'],"module.exports = {\"main\":\"./core.js\"}\n//@ sourceURL=/node_modules/name/package.json"));

require.define("/node_modules/name/core.js",Function(['require','module','exports','__dirname','__filename','process'],"/* vim:set ts=2 sw=2 sts=2 expandtab */\n/*jshint asi: true undef: true es5: true node: true browser: true devel: true\n         forin: true latedef: false globalstrict: true */\n'use strict';\n\nmodule.exports = typeof(Name) !== 'undefined' ? Name : new function() {\n  // Define character that we will use to prefix private names with\n  var prefix = '\\u2063'\n\n  // Shim `Object.*` methods so that names prefixed with our special `prefix`\n  // will not be included & will be defined as non-enumerable by default.\n  var names = Object.getOwnPropertyNames\n  var keys = Object.keys\n  var defineProperties = Object.defineProperties\n  var defineProperty = Object.defineProperty\n  var create = Object.create\n\n  function isPublic(name) { return String(name)[0] !== prefix }\n  function getOwnPublicNames(object) { return names(object).filter(isPublic) }\n  function getOwnPublicKeys(object) { return keys(object).filter(isPublic) }\n  function patch(descriptor) {\n    names(descriptor).forEach(function(name) {\n      if (!isPublic(name)) descriptor[name].enumerable = false\n    })\n    return descriptor\n  }\n  function defineOwnProperty(object, name, descriptor) {\n    if (!isPublic(name)) descriptor.enumerable = false\n    return defineProperty(object, name, descriptor)\n  }\n  function defineOwnProperties(object, descriptor) {\n    return defineProperties(object, patch(descriptor))\n  }\n  function createObject(prototype, descriptor) {\n    return create(prototype, descriptor && patch(descriptor))\n  }\n\n  // Note we use bind only in order to hide source of the function when\n  // `toString` is called on them.\n  Object.defineProperty(Object, 'getOwnPropertyNames', {\n    value: getOwnPublicNames.bind(Object)\n  })\n  Object.defineProperty(Object, 'keys', {\n    value: getOwnPublicKeys.bind(Object)\n  })\n  Object.defineProperty(Object, 'defineProperties', {\n    value: defineOwnProperties.bind(Object)\n  })\n  Object.defineProperty(Object, 'defineProperty', {\n    value: defineOwnProperty.bind(Object)\n  })\n  Object.defineProperty(Object, 'create', {\n    value: createObject.bind(Object)\n  })\n\n\n  function Name(hint) {\n    return Object.create(Name.prototype, {\n      name: {\n        value: prefix +\n          (hint || '') +\n          '@' +\n          Math.random().toString(32).substr(2)\n      }\n    })\n  }\n  Name.prototype = Object.create(null, {\n    toString: { value: function() { return this.name } },\n    valueOf: { value: function() { return this.name } }\n  })\n  return Name\n}\n\n//@ sourceURL=/node_modules/name/core.js"));

require.define("/node_modules/method/package.json",Function(['require','module','exports','__dirname','__filename','process'],"module.exports = {\"main\":\"./core.js\"}\n//@ sourceURL=/node_modules/method/package.json"));

require.define("/node_modules/method/core.js",Function(['require','module','exports','__dirname','__filename','process'],"/* vim:set ts=2 sw=2 sts=2 expandtab */\n/*jshint asi: true undef: true es5: true node: true browser: true devel: true\n         forin: true latedef: false globalstrict: true */\n'use strict';\n\nvar Name = require('name')\n\n// Shortcuts for ES5 reflection functions.\nvar create = Object.create\nvar defineProperty = Object.defineProperty\n\nfunction Method(base) {\n  /**\n  Private Method is a callable private name that dispatches on the first\n  arguments same named Method: Method(...rest) => rest[0][Method](...rest)\n  Default implementation may be passed in as an argument.\n  **/\n\n  // Create an internal unique name if default implementation is passed,\n  // use it's name as a name hint.\n  var name = Name(base && base.name).toString()\n\n  function dispatch() {\n    // Method dispatches on type of the first argument.\n    var target = arguments[0]\n    // If first argument is `null` or `undefined` use associated property\n    // maps for implementation lookups, otherwise use first argument itself.\n    // Use default implementation lookup map if first argument does not\n    // implements Method itself.\n    var implementation = target === null ? Null[name] :\n                         target === undefined ? Undefined[name] :\n                         target[name] || Default[name]\n\n    // If implementation not found there's not much we can do about it,\n    // throw error with a descriptive message.\n    if (!implementation)\n      throw Error('Type does not implements Method')\n\n    // If implementation is found delegate to it.\n    return implementation.apply(implementation, arguments)\n  }\n\n  // Define default implementation.\n  Default[name] = base\n\n  // Define `Method.toString` returning private name, this hack will enable\n  // Method definition like follows:\n  // var foo = Method()\n  // object[foo] = function() { /***/ }\n  dispatch.toString = function() { return name }\n\n  // Copy utility Methods for convenient API.\n  dispatch.implement = implementMethod\n  dispatch.define = defineMethod\n\n  return dispatch\n}\n\nfunction implement(object, Method, implementation) {\n  /**\n  Implements `Method` for the given `object` with a provided `implementation`.\n  Calling `Method` with `object` as a first argument will dispatch on provided\n  implementation.\n  **/\n  var target = object === null ? Null :\n               object === undefined ? Undefined :\n               object\n\n  return defineProperty(target, Method.toString(), { value: implementation })\n}\n\nfunction define(Type, Method, implementation) {\n  /**\n  Defines `Method` for the given `Type` with a provided `implementation`.\n  Calling `Method` with a first argument of this `Type` will dispatch on\n  provided `implementation`. If `Type` is a `Method` default implementation\n  is defined. If `Type` is a `null` or `undefined` `Method` is implemented\n  for that value type.\n  **/\n  return implement(Type && Type.prototype, Method, implementation)\n}\n\nMethod.prototype = create(null, {\n  toString: { value: Object.prototype.toString },\n  valueOf: { value: Object.prototype.valueOf },\n  define: { value: function(Type, implementation) {\n    return define(Type, this, implementation)\n  }},\n  implement: { value: function(object, implementation) {\n    return implement(object, this, implementation)\n  }}\n})\n\n// Define objects where Methods implementations for `null`, `undefined` and \n// defaults will be stored. Note that we create these objects from `null`,\n// otherwise implementation from `Object` would have being inherited. Also\n// notice that `Default` implementations are stored on `Method.prototype` this\n// provides convenient way for defining default implementations.\nvar Default = Method.prototype\nvar Null = create(Default)\nvar Undefined = create(Default)\n\n// Create Method shortcuts as for a faster access.\nvar defineMethod = Default.define\nvar implementMethod = Default.implement\n\n// Define exports on `Method` as it's only thing we export.\nMethod.implement = implement\nMethod.define = define\nMethod.Method = Method\nMethod.Null = Null\nMethod.Undefined = Undefined\n\nmodule.exports = Method\n\n//@ sourceURL=/node_modules/method/core.js"));

require.define("/node_modules/method/node_modules/name/package.json",Function(['require','module','exports','__dirname','__filename','process'],"module.exports = {\"main\":\"./core.js\"}\n//@ sourceURL=/node_modules/method/node_modules/name/package.json"));

require.define("/node_modules/method/node_modules/name/core.js",Function(['require','module','exports','__dirname','__filename','process'],"/* vim:set ts=2 sw=2 sts=2 expandtab */\n/*jshint asi: true undef: true es5: true node: true browser: true devel: true\n         forin: true latedef: false globalstrict: true */\n'use strict';\n\nmodule.exports = typeof(Name) !== 'undefined' ? Name : new function() {\n  // Define character that we will use to prefix private names with\n  var prefix = '\\u2063'\n\n  // Shim `Object.*` methods so that names prefixed with our special `prefix`\n  // will not be included & will be defined as non-enumerable by default.\n  var names = Object.getOwnPropertyNames\n  var keys = Object.keys\n  var defineProperties = Object.defineProperties\n  var defineProperty = Object.defineProperty\n  var create = Object.create\n\n  function isPublic(name) { return String(name)[0] !== prefix }\n  function getOwnPublicNames(object) { return names(object).filter(isPublic) }\n  function getOwnPublicKeys(object) { return keys(object).filter(isPublic) }\n  function patch(descriptor) {\n    names(descriptor).forEach(function(name) {\n      if (!isPublic(name)) descriptor[name].enumerable = false\n    })\n    return descriptor\n  }\n  function defineOwnProperty(object, name, descriptor) {\n    if (!isPublic(name)) descriptor.enumerable = false\n    return defineProperty(object, name, descriptor)\n  }\n  function defineOwnProperties(object, descriptor) {\n    return defineProperties(object, patch(descriptor))\n  }\n  function createObject(prototype, descriptor) {\n    return create(prototype, descriptor && patch(descriptor))\n  }\n\n  // Note we use bind only in order to hide source of the function when\n  // `toString` is called on them.\n  Object.defineProperty(Object, 'getOwnPropertyNames', {\n    value: getOwnPublicNames.bind(Object)\n  })\n  Object.defineProperty(Object, 'keys', {\n    value: getOwnPublicKeys.bind(Object)\n  })\n  Object.defineProperty(Object, 'defineProperties', {\n    value: defineOwnProperties.bind(Object)\n  })\n  Object.defineProperty(Object, 'defineProperty', {\n    value: defineOwnProperty.bind(Object)\n  })\n  Object.defineProperty(Object, 'create', {\n    value: createObject.bind(Object)\n  })\n\n\n  function Name(hint) {\n    return Object.create(Name.prototype, {\n      name: {\n        value: prefix +\n          (hint || '') +\n          '@' +\n          Math.random().toString(32).substr(2)\n      }\n    })\n  }\n  Name.prototype = Object.create(null, {\n    toString: { value: function() { return this.name } },\n    valueOf: { value: function() { return this.name } }\n  })\n  return Name\n}\n\n//@ sourceURL=/node_modules/method/node_modules/name/core.js"));

require.define("/core.js",Function(['require','module','exports','__dirname','__filename','process'],"/* vim:set ts=2 sw=2 sts=2 expandtab */\n/*jshint asi: true undef: true es5: true node: true browser: true devel: true\n         forin: true latedef: false globalstrict: true */\n\n'use strict';\n\nvar create = Object.create\n\nvar Method = require('method')\nvar Box = require('./box')\n\n// Define a shortcut for `Array.prototype.slice.call`.\nvar unbind = Function.call.bind(Function.bind, Function.call)\nvar slice = Array.slice || unbind(Array.prototype.slice)\n\nvar end = Box('end of the sequence')\nexports.end = end\n\nvar accumulated = Box('Indicator that source has being accumulateed')\nexports.accumulated = accumulated\n\nvar error = Box('error')\nexports.error = error\n\nvar accumulate = Method(function(self, next, start) {\n  next(end(), next(self, start))\n})\nexports.accumulate = accumulate\n\nfunction accumulateEmpty(_, f, start) { f(end(), start) }\n\naccumulate.define(undefined, accumulateEmpty)\naccumulate.define(null, accumulateEmpty)\n\naccumulate.define(Array, function(array, next, initial) {\n  var state = initial, index = 0, count = array.length\n  while (index < count) {\n    state = next(array[index++], state)\n    if (state && state.is === accumulated) break\n  }\n  next(end(), state)\n})\n\nfunction transformer(source, transform) {\n  return convert(source, function(self, next, initial) {\n    return accumulate(transform(source), next, initial)\n  })\n}\nexports.transformer = transformer\n\nfunction convert(source, method) {\n  return accumulate.implement(create(source), method)\n}\nexports.convert = convert\n\nfunction transform(source, f) {\n  return convert(source, function(self, next, initial) {\n    accumulate(source, function(value, result) {\n      return value && value.isBoxed ? next(value, result)\n                                    : f(next, value, result)\n    }, initial)\n  })\n}\nexports.transform = transform\n\nfunction filter(source, predicate) {\n  /**\n  Composes filtered version of given `source`, such that only items contained\n  will be once on which `f(item)` was `true`.\n  **/\n  return transform(source, function(next, value, accumulated) {\n    return predicate(value) ? next(value, accumulated) : accumulated\n  })\n}\nexports.filter = filter\n\nfunction map(source, f) {\n  /**\n  Composes version of given `source` where each item of source is mapped using `f`.\n  **/\n  return transform(source, function(next, value, accumulated) {\n    return next(f(value), accumulated)\n  })\n}\nexports.map = map\n\nfunction take(source, n) {\n  /**\n  Composes version of given `source` containing only element up until `f(item)`\n  was true.\n  **/\n  return transformer(source, function(source) {\n    var count = n >= 0 ? n : Infinity\n    return transform(source, function(next, value, result) {\n      count = count - 1\n      return count === 0 ? next(accumulated(), next(value, result)) :\n             count > 0 ? next(value, result) :\n                         next(accumulated(), result)\n    })\n  })\n}\nexports.take = take\n\nfunction drop(source, n) {\n  /**\n  Reduces given `reducible` to a firs `n` items.\n  **/\n  return transformer(source, function(source) {\n    var count = n >= 0 ? n : 1\n    return transform(source, function(next, value, result) {\n      return count -- > 0 ? result :\n                            next(value, result)\n    })\n  })\n}\nexports.drop = drop\n\nfunction takeWhile(source, predicate) {\n  /**\n  Composes version of given `source` containing only firs `n` items of it.\n  **/\n  return transform(source, function(next, value, state) {\n    return predicate(value) ? next(value, state) :\n                              next(accumulated(), state)\n  })\n}\nexports.takeWhile = takeWhile\n\nfunction dropWhile(source, predicate) {\n  /**\n  Reduces `reducible` further by dropping first `n`\n  items to on which `f(item)` ruturns `true`\n  **/\n  return transformer(source, function(source) {\n    var active = true\n    return transform(source, function(next, value, result) {\n      return active && (active = predicate(value)) ? result :\n                                                     next(value, result)\n    })\n  })\n}\nexports.dropWhile = dropWhile\n\nfunction tail(source) {\n  return drop(source, 1)\n}\nexports.tail = tail\n\n\n//console.log(into(skip(2, [ 1, 2, 3, 4, 5, 6 ])))\n//\n\nfunction append1(left, right) {\n  return convert({}, function(self, next, initial) {\n    accumulate(left, function(value, result) {\n      return value && value.is === end ? accumulate(right, next, result) :\n                                         next(value, result)\n    }, initial)\n  })\n}\nfunction append(left, right, rest) {\n  /**\n  Joins given `reducible`s into `reducible` of items\n  of all the `reducibles` preserving an order of items.\n  **/\n  return rest ? slice(arguments, 1).reduce(append1, left) :\n                append1(left, right)\n}\nexports.append = append\n\nfunction capture(source, recover) {\n  return convert(source, function(self, next, initial) {\n    accumulate(source, function(value, result) {\n      if (value && value.is === error) {\n        accumulate(recover(value.value, result), next, result)\n      } else {\n        next(value, result)\n      }\n    }, initial)\n  })\n}\nexports.capture = capture\n\n//@ sourceURL=/core.js"));

require.define("/box.js",Function(['require','module','exports','__dirname','__filename','process'],"/* vim:set ts=2 sw=2 sts=2 expandtab */\n/*jshint asi: true undef: true es5: true node: true browser: true devel: true\n         forin: true latedef: false globalstrict: true */\n\n'use strict';\n\nmodule.exports = function Box(description) {\n  description = description || 'Boxed value'\n  return function box(value) {\n    return {\n      isBoxed: true,\n      is: box,\n      value: value,\n      description: description\n    }\n  }\n}\n\n//@ sourceURL=/box.js"));

require.define("/signal.js",Function(['require','module','exports','__dirname','__filename','process'],"/* vim:set ts=2 sw=2 sts=2 expandtab */\n/*jshint asi: true undef: true es5: true node: true browser: true devel: true\n         forin: true latedef: false globalstrict: true */\n\n'use strict';\n\nvar Name = require('name')\nvar Method = require('method')\n\nvar core = require('./core'),\n    accumulate = core.accumulate,\n    accumulated = core.accumulated, end = core.end\n\nvar emit = Method()\n\nvar close = Method()\n\nvar accumulator = Name()\nvar state = Name()\nvar closed = Name()\n\nfunction isClosed(signal) {\n  return !!signal[closed]\n}\nfunction isOpen(signal) {\n  return !!signal[accumulator]\n}\n\nfunction Signal() {}\naccumulate.define(Signal, function(signal, next, initial) {\n  if (isOpen(signal)) throw Error('Signal is being consumed')\n  if (isClosed(signal)) return next(end(), initial)\n  signal[accumulator] = next\n  signal[state] = initial\n  return signal\n})\nemit.define(Signal, function(signal, value) {\n  if (isClosed(signal)) throw Error('Signal is already closed')\n  if (!isOpen(signal)) throw Error('Signal is not open')\n  var result = signal[accumulator](value, signal[state])\n  if (result && result.is === accumulated) {\n    close(signal)\n  } else {\n    signal[state] = result\n  }\n  return signal\n})\nclose.define(Signal, function(signal, value) {\n  if (isClosed(signal)) throw Error('Signal is already closed')\n  if (value !== undefined) emit(signal, value)\n  var result = signal[state]\n  var next = signal[accumulator]\n  signal[closed] = true\n  signal[accumulator] = null\n  signal[state] = null\n  next(end(), result)\n\n  return signal\n})\n\nfunction signal() { return new Signal() }\nsignal.type = Signal\nsignal.isOpen = isOpen\nsignal.isClosed = isClosed\nsignal.emit = emit\nsignal.close = close\n\nmodule.exports = signal\n\n\n//@ sourceURL=/signal.js"));

require.define("/accumulator.js",Function(['require','module','exports','__dirname','__filename','process'],"/* vim:set ts=2 sw=2 sts=2 expandtab */\n/*jshint asi: true undef: true es5: true node: true browser: true devel: true\n         forin: true latedef: false globalstrict: true */\n\n'use strict';\n\nvar Name = require('name')\nvar Method = require('method')\nvar Box = require('./box')\nvar core = require('./core'),\n    accumulate = core.accumulate, end = core.end, error = core.error,\n    convert = core.convert, map = core.map\n\nvar eventuals = require('eventual/eventual'),\n    defer = eventuals.defer, deliver = eventuals.deliver, when = eventuals.when\nvar eventual = require('eventual/core').eventual\n\nfunction reduce(source, f, state) {\n  var promise = defer()\n  accumulate(source, function(value) {\n    if (value && value.isBoxed) {\n      if (value.is === end) deliver(promise, state)\n      if (value.is === error) deliver(promise, value.value)\n      return value\n    } else {\n      state = f(state, value)\n      return state\n    }\n  }, state)\n  return when(promise)\n}\nexports.reduce = reduce\n\nfunction reducible(source, f) {\n  return convert(source, function(source, next, initial) {\n    var result = f(source, function forward(result, value) {\n      return next(value, result)\n    }, initial)\n    when(result, function(value) {\n      next(end(), value)\n    }, function(e) {\n      next(error(e))\n    })\n  })\n}\n\n// console.log(into(join([ 1, 2 ], [ 3 ], [ 3, 5 ])))\n\nfunction flatten(source) {\n  /**\n  Flattens given `reducible` collection of `reducible`s\n  to a `reducible` with items of nested `reducibles`.\n  **/\n  return reducible(source, function(_, next, initial) {\n    return reduce(source, function(result, nested) {\n      return reduce(nested, function(result, value) {\n        return next(result, value)\n      }, result)\n    }, initial)\n  })\n}\nexports.flatten = flatten\n\n// console.log(into(flatten([ [1, 2], [ 3, 4 ], [], [ 7, 8 ] ])))\n\nfunction expand(source, f) {\n  return flatten(map(source, f))\n}\nexports.expand = expand\n\n/*\nconsole.log(into(expand(function(x) {\n  return [ x, x * x ]\n}, [ 1, 2, 3 ])))\n*/\n\n\nfunction into(source, buffer) {\n  /**\n  Adds items of given `reducible` into\n  given `array` or a new empty one if omitted.\n  **/\n  return reduce(source, function(result, value) {\n    result.push(value)\n    return result\n  }, buffer || [])\n}\nexports.into = into\n\nfunction sequential(source) {\n  return reducible(source, function(_, next, initial) {\n    return reduce(source, eventual(function(result, value) {\n      return next(result, value)\n    }), initial)\n  })\n}\nexports.sequential = sequential\n\n//@ sourceURL=/accumulator.js"));

require.define("/node_modules/eventual/package.json",Function(['require','module','exports','__dirname','__filename','process'],"module.exports = {}\n//@ sourceURL=/node_modules/eventual/package.json"));

require.define("/node_modules/eventual/eventual.js",Function(['require','module','exports','__dirname','__filename','process'],"/* vim:set ts=2 sw=2 sts=2 expandtab */\n/*jshint asi: true undef: true es5: true node: true devel: true\n         globalstrict: true forin: true latedef: false supernew: true */\n/*global define: true */\n\n\"use strict\";\n\nvar Method = require('method')\nvar Name = require('name')\n\nvar $ = require('./watchable'),\n    watch = $.watch, watchers = $.watchers\n\n// Define a shortcut for `Array.prototype.slice.call`.\nvar unbind = Function.call.bind(Function.bind, Function.call)\nvar stringify = unbind(Object.prototype.toString)\n\nfunction type(value) {\n  var string = stringify(value)\n  var name = string.substring('[object '.length, string.length - 1)\n  return name[0].toLowerCase() + name.substr(1)\n}\n\nfunction isError(value) {\n  return type(value) === 'error'\n}\n\nfunction identity(value) { return value }\nfunction attempt(f) {\n  return function effort(value) {\n    try { return f(value) }\n    catch (error) { return error }\n  }\n}\n\n// Returns `true` if given `value` is pending, otherwise returns\n// `false`. All types will return false unless type specific\n// implementation is provided to do it otherwise.\nvar isPending = Method(function() { return false })\nexports.isPending = isPending\n\n// Set's up a callback to be called once pending\n// value is realized. All object by default are realized.\nvar await = Method(function(value, callback) {\n  callback(value)\n})\nexports.await = await\n\nfunction when(value, onFulfill, onError) {\n  var deferred = defer()\n  onFulfill = onFulfill ? attempt(onFulfill) : identity\n  onError = onError ? attempt(onError) : identity\n  await(value, function(result) {\n    // Override `deferred` so that outer `when` will return present\n    // result instead of deferred one if `value` is already present.\n    deferred = isError(result) ? deliver(deferred, onError(result))\n                               : deliver(deferred, onFulfill(result))\n  })\n  return deferred\n}\nexports.when = when\n\n// Fulfills deferred value.\nvar deliver = Method()\nexports.deliver = deliver\n\n// Returns array of registered observers.\nvar observers = Name()\n// internal boolean property indicating weather value\n// is realized or not.\nvar pending = Name()\n// Returns value if it's realized.\nvar valueOf = Name()\n\n// Type representing eventual values.\nfunction Eventual() {\n  // Set initial values.\n  this[observers] = []\n  this[pending] = true\n  this[valueOf] = null\n}\nawait.define(Eventual, function(value, callback) {\n  if (isPending(value))\n    watch(value, callback)\n  else\n    callback(value[valueOf])\n})\nwatchers.define(Eventual, function(value) {\n  return value[observers]\n})\nisPending.define(Eventual, function(value) {\n  return value[pending]\n})\ndeliver.define(Eventual, function(value, result) {\n  // TODO: Attempt to deliver as side effect of\n  // dispatch will change a value \n  if (isPending(value)) {\n    value[valueOf] = result\n    var listeners = watchers(value)\n    while (listeners.length)\n      await(result, listeners.shift())\n    value[pending] = false\n  }\n\n  return result\n})\nexports.Eventual = Eventual\n\n\nfunction defer() {\n  return new Eventual()\n}\nexports.defer = defer\n\n//@ sourceURL=/node_modules/eventual/eventual.js"));

require.define("/node_modules/eventual/node_modules/method/package.json",Function(['require','module','exports','__dirname','__filename','process'],"module.exports = {\"main\":\"./core.js\"}\n//@ sourceURL=/node_modules/eventual/node_modules/method/package.json"));

require.define("/node_modules/eventual/node_modules/method/core.js",Function(['require','module','exports','__dirname','__filename','process'],"/* vim:set ts=2 sw=2 sts=2 expandtab */\n/*jshint asi: true undef: true es5: true node: true browser: true devel: true\n         forin: true latedef: false */\n/*global define: true, Cu: true, __URI__: true */\n;(function(id, factory) { // Module boilerplate :(\n  if (typeof(define) === 'function') { // RequireJS\n    define(factory);\n  } else if (typeof(require) === 'function') { // CommonJS\n    factory.call(this, require, exports, module);\n  } else if (String(this).indexOf('BackstagePass') >= 0) { // JSM\n    factory(function require(uri) {\n      var imports = {};\n      this['Components'].utils.import(uri, imports);\n      return imports;\n    }, this, { uri: __URI__, id: id });\n    this.EXPORTED_SYMBOLS = Object.keys(this);\n  } else {  // Browser or alike\n    var globals = this;\n    factory(function require(id) {\n      return globals[id];\n    }, (globals[id] = {}), { uri: document.location.href + '#' + id, id: id });\n  }\n}).call(this, 'Method', function(require, exports, module) {\n\n'use strict';\n\nvar Name = require('name')\n\n// Shortcuts for ES5 reflection functions.\nvar create = Object.create\nvar defineProperty = Object.defineProperty\n\nfunction Method(base) {\n  /**\n  Private Method is a callable private name that dispatches on the first\n  arguments same named Method: Method(...rest) => rest[0][Method](...rest)\n  Default implementation may be passed in as an argument.\n  **/\n\n  // Create an internal unique name if default implementation is passed,\n  // use it's name as a name hint.\n  var name = Name(base && base.name).toString()\n\n  function dispatch() {\n    // Method dispatches on type of the first argument.\n    var target = arguments[0]\n    // If first argument is `null` or `undefined` use associated property\n    // maps for implementation lookups, otherwise use first argument itself.\n    // Use default implementation lookup map if first argument does not\n    // implements Method itself.\n    var implementation = target === null ? Null[name] :\n                         target === undefined ? Undefined[name] :\n                         target[name] || Default[name]\n\n    // If implementation not found there's not much we can do about it,\n    // throw error with a descriptive message.\n    if (!implementation)\n      throw Error('Type does not implements Method')\n\n    // If implementation is found delegate to it.\n    return implementation.apply(implementation, arguments)\n  }\n\n  // Define default implementation.\n  Default[name] = base\n\n  // Define `Method.toString` returning private name, this hack will enable\n  // Method definition like follows:\n  // var foo = Method()\n  // object[foo] = function() { /***/ }\n  dispatch.toString = function() { return name }\n\n  // Copy utility Methods for convenient API.\n  dispatch.implement = implementMethod\n  dispatch.define = defineMethod\n\n  return dispatch\n}\n\nfunction implement(object, Method, implementation) {\n  /**\n  Implements `Method` for the given `object` with a provided `implementation`.\n  Calling `Method` with `object` as a first argument will dispatch on provided\n  implementation.\n  **/\n  var target = object === null ? Null :\n               object === undefined ? Undefined :\n               object\n\n  return defineProperty(target, Method.toString(), { value: implementation })\n}\n\nfunction define(Type, Method, implementation) {\n  /**\n  Defines `Method` for the given `Type` with a provided `implementation`.\n  Calling `Method` with a first argument of this `Type` will dispatch on\n  provided `implementation`. If `Type` is a `Method` default implementation\n  is defined. If `Type` is a `null` or `undefined` `Method` is implemented\n  for that value type.\n  **/\n  return implement(Type && Type.prototype, Method, implementation)\n}\n\nMethod.prototype = create(null, {\n  toString: { value: Object.prototype.toString },\n  valueOf: { value: Object.prototype.valueOf },\n  define: { value: function(Type, implementation) {\n    return define(Type, this, implementation)\n  }},\n  implement: { value: function(object, implementation) {\n    return implement(object, this, implementation)\n  }}\n})\n\n// Define objects where Methods implementations for `null`, `undefined` and \n// defaults will be stored. Note that we create these objects from `null`,\n// otherwise implementation from `Object` would have being inherited. Also\n// notice that `Default` implementations are stored on `Method.prototype` this\n// provides convenient way for defining default implementations.\nvar Default = Method.prototype\nvar Null = create(Default)\nvar Undefined = create(Default)\n\n// Create Method shortcuts as for a faster access.\nvar defineMethod = Default.define\nvar implementMethod = Default.implement\n\n// Define exports on `Method` as it's only thing we export.\nMethod.implement = implement\nMethod.define = define\nMethod.Method = Method\nMethod.Null = Null\nMethod.Undefined = Undefined\n\nmodule.exports = Method\n\n});\n\n//@ sourceURL=/node_modules/eventual/node_modules/method/core.js"));

require.define("/node_modules/eventual/node_modules/name/package.json",Function(['require','module','exports','__dirname','__filename','process'],"module.exports = {\"main\":\"./core.js\"}\n//@ sourceURL=/node_modules/eventual/node_modules/name/package.json"));

require.define("/node_modules/eventual/node_modules/name/core.js",Function(['require','module','exports','__dirname','__filename','process'],"/* vim:set ts=2 sw=2 sts=2 expandtab */\n/*jshint asi: true undef: true es5: true node: true browser: true devel: true\n         forin: true latedef: false */\n/*global define: true, Cu: true, __URI__: true */\n;(function(id, factory) { // Module boilerplate :(\n  if (typeof(define) === 'function') { // RequireJS\n    define(factory);\n  } else if (typeof(require) === 'function') { // CommonJS\n    factory.call(this, require, exports, module);\n  } else if (~String(this).indexOf('BackstagePass')) { // JSM\n    factory(function require(uri) {\n      var imports = {};\n      Cu.import(uri, imports);\n      return imports;\n    }, this, { uri: __URI__, id: id });\n    this.EXPORTED_SYMBOLS = Object.keys(this);\n  } else {  // Browser or alike\n    var globals = this\n    factory(function require(id) {\n      return globals[id];\n    }, (globals[id] = {}), { uri: document.location.href + '#' + id, id: id });\n  }\n}).call(this, 'loader', function(require, exports, module) {\n\n'use strict';\n\nmodule.exports = typeof(Name) !== 'undefined' ? Name : new function() {\n  // Define character that we will use to prefix private names with\n  var prefix = '\\u2063'\n\n  // Shim `Object.*` methods so that names prefixed with our special `prefix`\n  // will not be included & will be defined as non-enumerable by default.\n  var names = Object.getOwnPropertyNames\n  var keys = Object.keys\n  var defineProperties = Object.defineProperties\n  var defineProperty = Object.defineProperty\n  var create = Object.create\n\n  function isPublic(name) { return String(name)[0] !== prefix }\n  function getOwnPublicNames(object) { return names(object).filter(isPublic) }\n  function getOwnPublicKeys(object) { return keys(object).filter(isPublic) }\n  function patch(descriptor) {\n    names(descriptor).forEach(function(name) {\n      if (!isPublic(name)) descriptor[name].enumerable = false\n    })\n    return descriptor\n  }\n  function defineOwnProperty(object, name, descriptor) {\n    if (!isPublic(name)) descriptor.enumerable = false\n    return defineProperty(object, name, descriptor)\n  }\n  function defineOwnProperties(object, descriptor) {\n    return defineProperties(object, patch(descriptor))\n  }\n  function createObject(prototype, descriptor) {\n    return create(prototype, descriptor && patch(descriptor))\n  }\n\n  // Note we use bind only in order to hide source of the function when\n  // `toString` is called on them.\n  Object.defineProperty(Object, 'getOwnPropertyNames', {\n    value: getOwnPublicNames.bind(Object)\n  })\n  Object.defineProperty(Object, 'keys', {\n    value: getOwnPublicKeys.bind(Object)\n  })\n  Object.defineProperty(Object, 'defineProperties', {\n    value: defineOwnProperties.bind(Object)\n  })\n  Object.defineProperty(Object, 'defineProperty', {\n    value: defineOwnProperty.bind(Object)\n  })\n  Object.defineProperty(Object, 'create', {\n    value: createObject.bind(Object)\n  })\n\n\n  function Name(hint) {\n    return Object.create(Name.prototype, {\n      name: {\n        value: prefix +\n          (hint || '') +\n          '@' +\n          Math.random().toString(32).substr(2)\n      }\n    })\n  }\n  Name.prototype = Object.create(null, {\n    toString: { value: function() { return this.name } },\n    valueOf: { value: function() { return this.name } }\n  })\n  return Name\n}\n\n});\n\n//@ sourceURL=/node_modules/eventual/node_modules/name/core.js"));

require.define("/node_modules/eventual/watchable.js",Function(['require','module','exports','__dirname','__filename','process'],"/* vim:set ts=2 sw=2 sts=2 expandtab */\n/*jshint asi: true undef: true es5: true node: true devel: true\n         globalstrict: true forin: true latedef: false supernew: true */\n/*global define: true */\n\n\"use strict\";\n\nvar Method = require('method')\n\n// Module defines protocol of `values` that can be watched. In order to support\n// this protocol one just needs to implement `watchers` method.\nvar watchers = Method()\nexports.watchers = watchers\n\n// Registers a `value` `watcher` function unless it already watches it.\nvar watch = Method(function(value, watcher) {\n  var listeners = watchers(value)\n  if (listeners && listeners.indexOf(watcher) < 0)\n    listeners.push(watcher)\n  return value\n})\nexports.watch = watch\n\n// Unregisters a `value` `watcher` function if it's being watched.\nvar unwatch = Method(function(value, watcher) {\n  var listeners = watchers(value)\n  var index = listeners && listeners.indexOf(watcher)\n  if (listeners && listeners.indexOf(watcher) >= 0)\n    listeners.splice(index, 1)\n  return value\n})\nexports.unwatch = unwatch\n\n//@ sourceURL=/node_modules/eventual/watchable.js"));

require.define("/node_modules/eventual/core.js",Function(['require','module','exports','__dirname','__filename','process'],"/* vim:set ts=2 sw=2 sts=2 expandtab */\n/*jshint asi: true undef: true es5: true node: true devel: true\n         globalstrict: true forin: true latedef: false supernew: true */\n/*global define: true */\n\n\"use strict\";\n\nvar Method = require('method')\nvar $ = require('./eventual'),\n    defer = $.defer, when = $.when, deliver = $.deliver\n\n// Define a shortcut for `Array.prototype.slice.call`.\nvar unbind = Function.call.bind(Function.bind, Function.call)\nvar slice = Array.slice || unbind(Array.prototype.slice)\n\nfunction group(eventuals) {\n  return slice(eventuals).reduce(function(eventuals, eventual) {\n    return when(eventual, function(value) {\n      return when(eventuals, function(values) {\n        values.push(value)\n        return values\n      })\n    })\n  }, [])\n}\n\nfunction go(f/*, rest */) {\n  return when(group(arguments), function(params) {\n    var f = params.shift()\n    return f.apply(f, params)\n  })\n}\nexports.go = go\n\nfunction recover(f, eventual) {\n  return when(eventual, identity, f)\n}\nexports.recover = recover\n\nfunction eventual(f) {\n  return function eventually() {\n    var params = slice(arguments)\n    params.unshift(f)\n    return go.apply(go, params)\n  }\n}\nexports.eventual = eventual\n\n\n//@ sourceURL=/node_modules/eventual/core.js"));

require.define("/examples/letters/main.js",Function(['require','module','exports','__dirname','__filename','process'],"/* vim:set ts=2 sw=2 sts=2 expandtab */\n/*jshint asi: true undef: true es5: true node: true browser: true devel: true\n         forin: true latedef: false globalstrict: true */\n'use strict';\n\nvar open = require('../../dom').open\nvar core = require('../../core'),\n    filter = core.filter, map = core.map\n\nvar reduce = require('../../accumulator').reduce\n\n\nvar mouseEvents = open(document.documentElement, 'mousemove')\nvar mousePositions = map(mouseEvents, function(event) {\n  return { x: event.clientX, y: event.clientY }\n})\n\nvar element = document.createElement('span')\nelement.textContent = 'hello world'\nelement.style.position = 'absolute'\ndocument.body.appendChild(element)\n\nreduce(mousePositions, function(result, position) {\n  element.style.top = position.y + 10\n  element.style.left = position.x + 20\n})\n\n//@ sourceURL=/examples/letters/main.js"));
require("/examples/letters/main.js");
})();
